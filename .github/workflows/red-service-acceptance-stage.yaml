name: Red service Acceptance stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string

defaults:
  run:
    shell: bash
    working-directory: red

env:
  # GHA SETTINGS
  USE_COMPOSER_CACHE: '1'
  USE_PHP_EXTENSION_CACHE: '1'
  # PHP SETTINGS
  PHP_EXTENSIONS: ctype, iconv, json, curl, gd, intl, opcache, openssl, mbstring, mysql, pdo_sqlite, openswoole
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v2
  # ARTIFACTS SETTINGS
  ARTIFATC_NAME_FOR_INTEGRATION_TEST_COVERAGE: '[red-service]-integration-test-coverage-reports-on-SHA'
  INTEGRATION_TEST_CLOVER_FILENAME: 'coverage-integration-test-clover.xml'
  ARTIFATC_NAME_FOR_INTEGRATION_TEST_DOC: '[red-service]-integration-test-docs-report-on-SHA'
  INTEGRATION_TEST_DOC_FILENAME: 'doc-integration-test.txt'
  ARTIFATC_NAME_FOR_FUNCTIONAL_TEST_COVERAGE: '[red-service]-functional-test-coverage-reports-on-SHA'
  FUNCTIONAL_TEST_CLOVER_FILENAME: 'coverage-functional-test-clover.xml'
  ARTIFATC_NAME_FOR_FUNCTIONAL_TEST_DOC: '[red-service]-functional-test-docs-report-on-SHA'
  FUNCTIONAL_TEST_DOC_FILENAME: 'doc-functional-test.txt'


jobs:
  app-preconditions-checks:
    name: App preconditions checks (php-${{ matrix.php }})
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    continue-on-error: ${{ matrix.is-php-experimental }}
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '8.1'
        is-php-experimental: [false]
        generate-coverage-report: [true]
      #        include:
      #          - php: '8.2'
      #            is-php-experimental: true
      #            generate-coverage-report: false
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      #      - name: info triggering workflow - commit message
      #        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'

      - name: Setup php extension cache environment
        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache PHP extensions
        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.22.0
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer

      - name: Set Composer Cache Directory
        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --ansi --no-scripts

      - name: Validate configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi

      - name: Validate Symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi
        continue-on-error: true

      - name: Run database migrations
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema validate
        run: ./bin/console doctrine:schema:validate -e test --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8


  integration-test:
    name: Integration tests (php-${{ matrix.php }})
    runs-on: ubuntu-20.04
    needs:
      - app-preconditions-checks
    timeout-minutes: 15
    continue-on-error: ${{ matrix.is-php-experimental }}
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '8.1'
        is-php-experimental: [false]
        generate-coverage-report: [false]
#        include:
#          - php: '8.1'
#            is-php-experimental: true
#            generate-coverage-report: false
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

#      - name: info triggering workflow - commit message
#        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'

      - name: Setup php extension cache environment
        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache PHP extensions
        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.22.0
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: pcov
          tools: symfony

      - name: Set Composer Cache Directory
        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --ansi --no-scripts

      - name: Run database migrations
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run only integration test
        run: |
          bin/phpunit --testsuite=integration --colors=always \
          --coverage-clover $INTEGRATION_TEST_CLOVER_FILENAME \
          --testdox-text $INTEGRATION_TEST_DOC_FILENAME
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
          SYMFONY_DEPRECATIONS_HELPER: disabled

      - name: Get integration test coverage artifact name
        if: ${{ matrix.generate-coverage-report }}
        id: integration-coverage-artifact-name
        run: echo "name=$ARTIFATC_NAME_FOR_INTEGRATION_TEST_COVERAGE-$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Save integration coverage reports
        if: ${{ matrix.generate-coverage-report }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.integration-coverage-artifact-name.outputs.name }}
          path: ${{ env.INTEGRATION_TEST_CLOVER_FILENAME }}

      - name: Get integration test doc artifact name
        if: ${{ matrix.generate-coverage-report }}
        id: integration-test-doc-artifact-name
        run: echo "name=$ARTIFATC_NAME_FOR_INTEGRATION_TEST_DOC-$GITHUB_SHA"  >> $GITHUB_OUTPUT

      - name: Save test doc reports
        if: ${{ matrix.generate-coverage-report }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.integration-test-doc-artifact-name.outputs.name }}
          path: ${{ env.INTEGRATION_TEST_DOC_FILENAME }}


#  functional-test:
#    name: Functional tests (php-${{ matrix.php }})
#    runs-on: ubuntu-20.04
#    needs:
#      - app-preconditions-checks
#    timeout-minutes: 15
#    continue-on-error: ${{ matrix.is-php-experimental }}
#    services:
#      pgsql:
#        image: postgres:13-alpine
#        env:
#          POSTGRES_DB: ci-db_test
#          POSTGRES_PASSWORD: ci-db-password
#          POSTGRES_USER: ci-db-user
#        ports:
#          - 5432/tcp
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 3
#    strategy:
#      matrix:
#        php:
#          - '8.0'
#        node:
#          - '16.x'
#        is-php-experimental: [ false ]
#        generate-coverage-report: [ true ]
#        include:
#          - php: '8.1'
#            node: '16.x'
#            is-php-experimental: true
#            generate-coverage-report: false
#      fail-fast: true
#    steps:
#      - name: Checkout on SHA-${{ inputs.triggering-sha }}
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.triggering-sha }}
#
##      - name: info triggering workflow - commit message
##        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'
#
#      - name: Setup php extension cache environment
#        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
#        id: cache-php-extensions
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
#
#      - name: Cache PHP extensions
#        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
#        uses: actions/cache@v4
#        with:
#          path: ${{ steps.cache-php-extensions.outputs.dir }}
#          key: ${{ steps.cache-php-extensions.outputs.key }}
#          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@2.22.0
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          ini-values: memory_limit=-1
#          coverage: pcov
#          tools: symfony
#
#      - name: Set Composer Cache Directory
#        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
#        id: composer-cache
#        run: |
#          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache Composer dependencies
#        uses: actions/cache@v4
#        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-php-${{ matrix.php }}-composer-
#
#      - name: Install Composer dependencies
#        run: composer install --prefer-dist --no-progress --ansi --no-scripts
#
#      - name: Run database migrations
#        if: ${{ github.ref_name == 'main' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Run database schema update
#        if: ${{ github.ref_name != 'main' }}
#        run: ./bin/console doctrine:schema:update -e test --force --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: "${{ matrix.node }}"
#
#      #      - name: Get Yarn cache directory
#      #        id: yarn-cache
#      #        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
#      #
#      #      - name: Cache Yarn
#      #        uses: actions/cache@v4
#      #        with:
#      #          path: ${{ steps.yarn-cache.outputs.dir }}
#      #          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
#      #          restore-keys: |
#      #            ${{ runner.os }}-node-${{ matrix.node }}-yarn-
#      #
#      #      - name: Install JS dependencies
#      #        run: yarn install
#
#      - name: Build assets
#        run: |
#          bin/console assets:install public -vvv -e test
#      #          yarn build
#
#      - name: Run webserver
#        run: symfony server:start --port=8080 --dir=public --daemon --no-tls
#
#      - name: Run functional testsuite
#        run: |
#          bin/phpunit --testsuite=functional --colors=always \
#          --coverage-clover $FUNCTIONAL_TEST_CLOVER_FILENAME \
#          --testdox-text $FUNCTIONAL_TEST_DOC_FILENAME
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db_test?serverVersion=13&charset=utf8
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#
#      - name: Get functional test coverage artifact name
#        if: ${{ matrix.generate-coverage-report }}
#        id: functional-coverage-artifact-name
#        run: echo "name=$ARTIFATC_NAME_FOR_FUNCTIONAL_TEST_COVERAGE-$GITHUB_SHA" >> $GITHUB_OUTPUT
#
#      - name: Save functional coverage reports
#        if: ${{ matrix.generate-coverage-report }}
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ steps.functional-coverage-artifact-name.outputs.name }}
#          path: ${{ env.FUNCTIONAL_TEST_CLOVER_FILENAME }}
#
#      - name: Get functional test doc artifact name
#        if: ${{ matrix.generate-coverage-report }}
#        id: functional-test-doc-artifact-name
#        run: echo "name=$ARTIFATC_NAME_FOR_FUNCTIONAL_TEST_DOC-$GITHUB_SHA" >> $GITHUB_OUTPUT
#
#      - name: Save test doc reports
#        if: ${{ matrix.generate-coverage-report }}
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ steps.functional-test-doc-artifact-name.outputs.name }}
#          path: ${{ env.FUNCTIONAL_TEST_DOC_FILENAME }}
#
#
#  behat-test:
#    name: Behat acceptance tests (php-${{ matrix.php }})
#    runs-on: ubuntu-20.04
#    needs:
#      - app-preconditions-checks
#    timeout-minutes: 15
#    continue-on-error: ${{ matrix.is-php-experimental }}
#    services:
#      pgsql:
#        image: postgres:13-alpine
#        env:
#          POSTGRES_DB: ci-db_test
#          POSTGRES_PASSWORD: ci-db-password
#          POSTGRES_USER: ci-db-user
#        ports:
#          - 5432/tcp
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 3
#    strategy:
#      matrix:
#        php:
#          - '8.0'
#        node:
#          - '16.x'
#        is-php-experimental: [ false ]
#        generate-coverage-report: [ true ]
#        include:
#          - php: '8.1'
#            node: '16.x'
#            is-php-experimental: true
#            generate-coverage-report: false
#      fail-fast: true
#    steps:
#      - name: Checkout on SHA-${{ inputs.triggering-sha }}
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.triggering-sha }}
#
##      - name: info triggering workflow - commit message
##        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'
#
#      - name: Setup php extension cache environment
#        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
#        id: cache-php-extensions
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
#
#      - name: Cache PHP extensions
#        if: ${{ env.USE_PHP_EXTENSION_CACHE  == '1' }}
#        uses: actions/cache@v4
#        with:
#          path: ${{ steps.cache-php-extensions.outputs.dir }}
#          key: ${{ steps.cache-php-extensions.outputs.key }}
#          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@2.22.0
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          ini-values: memory_limit=-1
#          coverage: none
#          tools: symfony
#
#      - name: Set Composer Cache Directory
#        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
#        id: composer-cache
#        run: |
#          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache Composer dependencies
#        uses: actions/cache@v4
#        if: ${{ env.USE_COMPOSER_CACHE  == '1' }}
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-php-${{ matrix.php }}-composer-
#
#      - name: Install Composer dependencies
#        run: composer install --prefer-dist --no-progress --ansi --no-scripts
#
#      - name: Run database migrations
#        if: ${{ github.ref_name == 'main' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Run database schema update
#        if: ${{ github.ref_name != 'main' }}
#        run: ./bin/console doctrine:schema:update -e test --force --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: "${{ matrix.node }}"
#
#      #      - name: Get Yarn cache directory
#      #        id: yarn-cache
#      #        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
#      #
#      #      - name: Cache Yarn
#      #        uses: actions/cache@v4
#      #        with:
#      #          path: ${{ steps.yarn-cache.outputs.dir }}
#      #          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
#      #          restore-keys: |
#      #            ${{ runner.os }}-node-${{ matrix.node }}-yarn-
#      #
#      #      - name: Install JS dependencies
#      #        run: yarn install
#
#      - name: Build assets
#        run: |
#          bin/console assets:install public -vvv -e test
#      #          yarn build
#
#      - name: Run webserver
#        run: symfony server:start --port=8080 --dir=public --daemon --no-tls
#
#      - name: Run behat tests
#        run: vendor/bin/behat --colors
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#          DATABASE_DSN: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db_test?serverVersion=13&charset=utf8
#          SYMFONY_DEPRECATIONS_HELPER: disabled
